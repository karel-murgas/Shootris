TODO:
Clean up code
Background image
Up-going blobs (see bellow)
When destroying cell, brighter flash fo a moment (50ms?)
Universal ammo
Ammo of two colors
Setting & difficulties
Handle potential errors


Fails:
Exe file - I need a help with this! (Python 3.5, Pyinstaller doesn't work (even when commenting out the pictures) - it creates exe, which crashes to desktop)


Code cleaning ideas:
* Lables as instances of class
** Name, positon (top), flashing (time, status), rect
** Flashing effect, writing

* Random colors as separate function
** Generate tips separate, takes and returns also positon (so tips can be always changed)

* Learn, how to use sprites!
** Use them for cell blobs
** Use sprite groups as blobs (hopefully)
** It seems to have great potential
** Erased cells may uncover new background image (nude lady of course)
** Learn from some tetris game

* Every cell is a sprite
* Group all_cells
* Group main_blob
* Group upgoing_blob
* Group upgoing_shadow_blob (for each cell in upgoing blob do +1 left&top and +1 top&bottom "shadow" cell for collision testing in "is next to?")
* Group area blob (area with same color) - pushed into list? As there is no group of groups... (or is there? or can it be created?)
* Color at the level of group for simple condition to avoid unnecessary collision testing
* When cell is created:
 - if takes color from left / down -> join that group
 - look left / down - if the color is same, merge groups
* Shooting -> collision of mouse pointer with all_cells blob
           -> destroy it's area blob (code: type(group).__name__ == 'area'; tohle ověří jestli grupa group má classu 'area')
           -> check for adjacent area blobs (main vs upgoing)
* It's possible to extend parent method! So I can extend kill() to do some cool effects! (define it as a new method + call parent method in it - Tobi's explosions will be possible
* Background (used by clear) will start as black; when cell is killed, it blits rect of BGIMG to that surgace
 



Feature ideas:
* Up-going blob:
** Subclass of blob
** One color (+ Nones)
** First generate, then randomly choose first column
** Destroy when leaving screen
** It covers main_blob + acts as part of it for purpose of hit spreading
** For spreading of hit I can use corners of cell (collision, color comparing) -> if cell_collides_with_lower_blob and lower_blob[x,y] == color then cell.damage()


*RPG model:
** Finishing levels gives you points and you can buy upgrades with them
** You can choose level (harder levels = more points)
** Upgrades like better ammo (universal, double)
** Skills (after pressing key something happens - maib_blob stopped for x second, recolor blob_part, delete row, ...)   